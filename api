<template>
  <main
    class="bg-white mt-10 pb-[40px] pt-5 3xl:px-[10px] 3xl:mt-5 rounded-lg xl:w-[1200px] 1xl:w-[1280px] 2xl:w-[1460px] 3xl:w-[1830px] xl:ml-[-60px] 1xl:ml-[-100px] 2xl:ml-[10px] 3xl:ml-[-60px] 3xl:h-[850px]"
  >
    <div>
      <h1
        class="font-bold uppercase mb-[10px] pl-5 text-[#992121] text-[20px] 1xl:text-[17px] 3xl:text-[23px]"
      >
        PICCOLO Design studio
      </h1>
    </div>

    <div class="flex">
      <aside
        class="container rounded-lg ml-5 1xl:h-[500px] 2xl:h-[560px] pb-10 1xl:w-[680px] 2xl:w-[800px] 3xl:w-[1000px] 3xl:h-[730px]"
        style="background-color: #eff2ef"
      >
        <header v-if="!showPiccoloScenario">
          <main
            class="overflow-auto 3xl:pt-[60px] 1xl:h-[480px] pt-[40px] 2xl:h-[550px] 3xl:h-[680px] bg-gray-00 bg-red-00"
          >
            <div
              class="pr-2 mt-[0px] ml-4 bg-red-00 relative left-[-10px] top-[-30px] 3xl:top-[-50px] w-[100px] h-[20px]"
            >
              <div class="flex bg-red-00 w-[250px] justify-between">
                <v-btn
                  :icon="showPiccoloScenario ? 'mdi-close' : 'mdi-plus'"
                  size="small"
                  color="primary"
                  @click="togglePiccoloScenario"
                  class="cursor-pointer"
                ></v-btn>
              </div>
            </div>

            <div
              class="flex gap-2 flex-wrap 1xl:ml-[10px] 2xl:ml-[30px] 3xl:pt-[10px] justify-start"
            >
              <div
                v-for="card in cards"
                :key="card.id"
                class="bg-white 1xl:w-[260px] 2xl:w-[310px] 2xl:h-[450px] 3xl:h-[530px] 3xl:w-[400px] 2xl:ml-10 rounded-lg relative"
                @click="selectCard(card)"
                @dblclick="deselectCard(card.id)"
                @touchstart="startLongPress(card)"
                @touchend="endLongPress"
                :class="[
                  'bg-white border-2 ml-10 mb-10 rounded-lg relative cursor-poi5nter transition-colors duration-300',
                  selectedCardId === card.id
                    ? 'border-4 border-red-500'
                    : 'border-blue-500',
                ]"
              >
                <div
                  v-if="animationCardId === card.id"
                  class="absolute top-[-50px] left-[90px] 2xl:left-[110px] 3xl:left-[160px] transform -translate-x-1/2 text-4xl text-red-500 arrow-animation"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    viewBox="0 0 1080 1080"
                    width="80"
                    height="80"
                    preserveAspectRatio="xMidYMid meet"
                    style="
                      width: 100%;
                      height: 100%;
                      transform: translate3d(0px, 0px, 0px) rotate(90deg);
                      content-visibility: visible;
                    "
                  >
                    <defs>
                      <clipPath id="__lottie_element_27881">
                        <rect width="1080" height="1080" x="0" y="0"></rect>
                      </clipPath>
                    </defs>
                    <g clip-path="url(#__lottie_element_27881)">
                      <g
                        transform="matrix(3.190000057220459,0,0,3.190000057220459,424.0982666015625,338.81280517578125)"
                        opacity="1"
                        style="display: block"
                      >
                        <g
                          opacity="1"
                          transform="matrix(1,0,0,1,50.72800064086914,64.3219985961914)"
                        >
                          <path
                            fill="rgb(255,94,0)"
                            fill-opacity="1"
                            d=" M46.05500030517578,5.840000152587891 C50.479000091552734,2.628000020980835 50.479000091552734,-2.628999948501587 46.05500030517578,-5.841000080108643 C46.05500030517578,-5.841000080108643 -44.599998474121094,-60.858001708984375 -44.599998474121094,-60.858001708984375 C-49.02399826049805,-64.07099914550781 -50.47800064086914,-61.874000549316406 -47.83100128173828,-55.97700119018555 C-47.83100128173828,-55.97700119018555 -16.658000946044922,0 -16.658000946044922,0 C-16.658000946044922,0 -47.83100128173828,55.97700119018555 -47.83100128173828,55.97700119018555 C-50.47800064086914,61.874000549316406 -49.02399826049805,64.07099914550781 -44.599998474121094,60.85900115966797 C-44.599998474121094,60.85900115966797 46.05500030517578,5.840000152587891 46.05500030517578,5.840000152587891z"
                          ></path>
                        </g>
                        <g
                          opacity="1"
                          transform="matrix(1,0,0,1,50.8380012512207,95.49099731445312)"
                        >
                          <path
                            fill="rgb(206,76,0)"
                            fill-opacity="1"
                            d=" M-16.767000198364258,-31.16900062561035 C-16.767000198364258,-31.16900062561035 -47.941001892089844,24.808000564575195 -47.941001892089844,24.808000564575195 C-50.5880012512207,30.704999923706055 -49.13399887084961,32.902000427246094 -44.709999084472656,29.690000534057617 C-44.709999084472656,29.690000534057617 45.94499969482422,-25.32900047302246 45.94499969482422,-25.32900047302246 C48.15700149536133,-26.934999465942383 49.26300048828125,-29.052000045776367 49.26300048828125,-31.16900062561035 C49.26300048828125,-31.16900062561035 -16.767000198364258,-31.16900062561035 -16.767000198364258,-31.16900062561035z"
                          ></path>
                        </g>
                      </g>
                      <g
                        transform="matrix(3.190000057220459,0,0,3.190000057220459,264.09820556640625,338.81280517578125)"
                        opacity="1"
                        style="display: block"
                      >
                        <g
                          opacity="1"
                          transform="matrix(1,0,0,1,50.72800064086914,64.3219985961914)"
                        >
                          <path
                            fill="rgb(255,94,0)"
                            fill-opacity="1"
                            d=" M46.05500030517578,5.840000152587891 C50.479000091552734,2.628000020980835 50.479000091552734,-2.628999948501587 46.05500030517578,-5.841000080108643 C46.05500030517578,-5.841000080108643 -44.599998474121094,-60.858001708984375 -44.599998474121094,-60.858001708984375 C-49.02399826049805,-64.07099914550781 -50.47800064086914,-61.874000549316406 -47.83100128173828,-55.97700119018555 C-47.83100128173828,-55.97700119018555 -16.658000946044922,0 -16.658000946044922,0 C-16.658000946044922,0 -47.83100128173828,55.97700119018555 -47.83100128173828,55.97700119018555 C-50.47800064086914,61.874000549316406 -49.02399826049805,64.07099914550781 -44.599998474121094,60.85900115966797 C-44.599998474121094,60.85900115966797 46.05500030517578,5.840000152587891 46.05500030517578,5.840000152587891z"
                          ></path>
                        </g>
                        <g
                          opacity="1"
                          transform="matrix(1,0,0,1,50.8380012512207,95.49099731445312)"
                        >
                          <path
                            fill="rgb(206,76,0)"
                            fill-opacity="1"
                            d=" M-16.767000198364258,-31.16900062561035 C-16.767000198364258,-31.16900062561035 -47.941001892089844,24.808000564575195 -47.941001892089844,24.808000564575195 C-50.5880012512207,30.704999923706055 -49.13399887084961,32.902000427246094 -44.709999084472656,29.690000534057617 C-44.709999084472656,29.690000534057617 45.94499969482422,-25.32900047302246 45.94499969482422,-25.32900047302246 C48.15700149536133,-26.934999465942383 49.26300048828125,-29.052000045776367 49.26300048828125,-31.16900062561035 C49.26300048828125,-31.16900062561035 -16.767000198364258,-31.16900062561035 -16.767000198364258,-31.16900062561035z"
                          ></path>
                        </g>
                      </g>
                    </g>
                  </svg>
                </div>

                <!-- arrow-animation left-to-right -->
                <!-- <div
                  v-if="
                    selectedCardId === card.id || longPressedCardId === card.id
                  "
                  class="absolute deletearrow top-[18px] right-[34px] z-10"
                >
                  <button class="rotate-180">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      xmlns:xlink="http://www.w3.org/1999/xlink"
                      viewBox="0 0 37 53"
                      width="40"
                      height="50"
                      preserveAspectRatio="xMidYMid meet"
                      style="
                        width: 100%;
                        height: 100%;
                        transform: rotate(10deg);
                        content-visibility: visible;
                      "
                    >
                      <defs>
                        <clipPath id="__lottie_element_13">
                          <rect width="37" height="53" x="0" y="0"></rect>
                        </clipPath>
                      </defs>
                      <g clip-path="url(#__lottie_element_13)">
                        <g
                          transform="matrix(1,0,0,1,18.5,26.5)"
                          opacity="1"
                          style="display: block"
                        >
                          <g opacity="1" transform="matrix(1,0,0,1,0,0)">
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              fill-opacity="0"
                              stroke="rgb(255,105,59)"
                              stroke-opacity="1"
                              stroke-width="3"
                              d="M16.625,-24.5 C16.625,-24.5 22.375,4.125 -15,20.625"
                              stroke-dasharray="100"
                              stroke-dashoffset="100"
                            >
                              <animate
                                attributeName="stroke-dashoffset"
                                from="100"
                                to="0"
                                dur="1.5s"
                                fill="freeze"
                                repeatCount="indefinite"
                              />
                            </path>
                          </g>
                        </g>

                        <g
                          transform="matrix(1,0,0,1,18.5,26.5)"
                          opacity="1"
                          style="display: block"
                        >
                          <g opacity="1" transform="matrix(1,0,0,1,0,0)">
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              fill-opacity="0"
                              stroke="rgb(255,105,59)"
                              stroke-opacity="1"
                              stroke-width="3"
                              d="M-11.25,11.875 C-11.25,11.875 -16,21 -16,21 C-16,21 -9.654000282287598,22.972000122070312 -7.474999904632568,23.649999618530273"
                              stroke-dasharray="50"
                              stroke-dashoffset="50"
                            >
                              <animate
                                attributeName="stroke-dashoffset"
                                from="50"
                                to="0"
                                dur="1.5s"
                                fill="freeze"
                                repeatCount="indefinite"
                              />
                            </path>
                          </g>
                        </g>
                      </g>
                    </svg>

                     <svg
                      xmlns="http://www.w3.org/2000/svg"
                      xmlns:xlink="http://www.w3.org/1999/xlink"
                      viewBox="0 0 37 53"
                      width="40"
                      height="50"
                      preserveAspectRatio="xMidYMid meet"
                      style="
                        width: 100%;
                        height: 100%;
                        transform: rotate(190deg);
                        transform: translate3d(0px, 0px, 0px);
                        content-visibility: visible;
                      "
                    >
                      <defs>
                        <clipPath id="__lottie_element_13">
                          <rect width="37" height="53" x="0" y="0"></rect>
                        </clipPath>
                      </defs>
                      <g clip-path="url(#__lottie_element_13)">
                        <g
                          transform="matrix(1,0,0,1,18.5,26.5)"
                          opacity="1"
                          style="display: block"
                        >
                          <g opacity="1" transform="matrix(1,0,0,1,0,0)">
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              fill-opacity="0"
                              stroke="rgb(255,105,59)"
                              stroke-opacity="1"
                              stroke-width="3"
                              d=" M16.625,-24.5 C16.625,-24.5 22.375,4.125 -15,20.625"
                            ></path>
                          </g>
                        </g>
                        <g
                          transform="matrix(1,0,0,1,18.5,26.5)"
                          opacity="1"
                          style="display: block"
                        >
                          <g opacity="1" transform="matrix(1,0,0,1,0,0)">
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              fill-opacity="0"
                              stroke="rgb(255,105,59)"
                              stroke-opacity="1"
                              stroke-width="3"
                              d=" M-11.25,11.875 C-11.25,11.875 -16,21 -16,21 C-16,21 -9.654000282287598,22.972000122070312 -7.474999904632568,23.649999618530273"
                            ></path>
                          </g>
                        </g>
                      </g>
                    </svg> 
                  </button>
                </div> -->

                <div
                  v-if="!card.isDefault"
                  class="absolute top-[1px] right-[-2px] z-10"
                >
                  <button
                    @click.stop="deleteCard(card)"
                    class="text-red-500 hover:text-red-700"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-6 w-6"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M6 18L18 6M6 6l12 12"
                      />
                    </svg>
                  </button>
                </div>

                <div class="bg-red-00 flex justify-center items-center">
                  <img
                    v-if="getImageForCard(card.name)"
                    :src="getImageForCard(card.name)"
                    alt="Car images"
                    class="absolute top-[10px] left-[15px] 1xl:h-[150px] 1xl:w-[230px] 2xl:h-[150px] 2xl:w-[270px] 3xl:h-[200px] 3xl:w-[370px] rounded-lg"
                  />
                </div>
                <div
                  class="bg-yellow-00 1xl:w-[255px] 2xl:w-[300px] 3xl:w-[390px] flex justify-center capitalize pt-[170px] 3xl:pt-[220px] text-[#992121] font-bold mr-9"
                >
                  {{ card.name }}
                </div>

                <section
                  class="bg-red-00 h-[250px] pb-4 overflow-auto flex justify-center items-end"
                >
                  <div
                    class="flex justify-end items-end min-h-[250px] overflow-y-auto bg-red-00"
                  >
                    <div
                      v-for="system in card.components"
                      :key="system.system"
                      class=""
                    >
                      <div
                        class="bg-blue-300 1xl:px-2 1xl:py-1 1xl:mx-3 2xl:px-2 2xl:py-1 mb-1 2xl:mx-1 3xl:px-6 3xl:py-2 3xl:mx-3 flex justify-center text-[16px] items-center"
                        v-for="containerName in system.containers"
                        :key="containerName"
                      >
                        {{ containerName }}
                      </div>

                      <div
                        class="1xl:px-3 border-2 border-blue-500 border-dashed 1xl:py-1 1xl:mx-3 2xl:px-2 2xl:py-2 mb-1 2xl:mx-1 3xl:px-6 3xl:py-2 3xl:mx-3 flex justify-center items-center capitalize"
                        :class="{
                          'py-2 px-2 border-3 border-blue-500 bg-gray-300 ':
                            system.system.toLowerCase() === 'zc front' ||
                            system.system.toLowerCase() === 'zc rear',
                        }"
                      >
                        {{ system.system }}
                      </div>
                    </div>
                  </div>
                </section>
              </div>
            </div>
          </main>
        </header>

        <PiccoloScenario v-else @close="handleCloseScenario" />
      </aside>
      <aside>
        <Servicelocation
          :selectedCardName="selectedCardName"
          class="relative top-[-420px] left-[25px] xl:top-[-10px] xl:left-[30px] 1xl:top-[0px] 1xl:left-[10px] 2xl:top-[0px] 2xl:left-[20px] 3xl:left-[70px]"
        />
      </aside>
    </div>
  </main>
</template>

<script setup>
import { ref, onMounted, onBeforeUnmount, watch } from "vue";
// import axios from "axios"; // Import Axios
// import yaml from "js-yaml"; // Import js-yaml for YAML conversion

// COMPONENTS
import PiccoloScenario from "./piccoloSenario.vue";
import Servicelocation from "./servicelocation.vue";

// IMAGES
import carDriving from "../public/img/driving.jpeg";
import carParking from "../public/img/parking.jpg";
import carCharging from "../public/img/charging.jpeg";
// import carLowbattery from "../public/img/lowbattery.jpeg";

const nuxtApp = useNuxtApp();
const API_URL = nuxtApp.$config.public.apiUrl;

const showPiccoloScenario = ref(false);

const togglePiccoloScenario = () => {
  showPiccoloScenario.value = !showPiccoloScenario.value;
};

const handleCloseScenario = () => {
  showPiccoloScenario.value = false;
  reloadPage();
};

// Function to reload the page and fetch updated data
const reloadPage = () => {
  initialiationMethod(); // Fetch data from localStorage
};

let cards = ref([
  {
    id: 1,
    name: "High-performance for BMS",
    isDefault: true, // Mark as default
    components: [
      { system: "soc0", containers: [] },
      { system: "soc1", containers: ["mavd", "blis"] },
      { system: "zc front", containers: ["rdv", "frism"] },
      { system: "zc rear", containers: [] },
    ],
  },
  {
    id: 2,
    name: "Eco mode ON for BMS",
    isDefault: true, // Mark as default
    components: [
      { system: "soc0", containers: ["blis"] },
      { system: "soc1", containers: [] },
      { system: "zc front", containers: ["frism"] },
      { system: "zc rear", containers: [] },
    ],
  },
]);

const getImageForCard = (cardName) => {
  const images = {
    "High-performance for BMS": carDriving,
    "Eco mode ON for BMS": carParking,
    "Charging for BMS": carCharging,
    // lowbattery: carLowbattery,
  };
  return images[cardName] || null;
};

onMounted(() => {
  initialiationMethod();
  startAutoSelection();
});

const initialiationMethod = () => {
  let localStorageCards = localStorage.getItem("cards");
  if (localStorageCards) {
    cards.value = JSON.parse(localStorageCards);
  } else {
    localStorage.setItem("cards", JSON.stringify(cards.value));

    // localStorageCards = localStorage.setItem(
    //   "cards",
    //   JSON.stringify(cards.value)
    // );
    // if (localStorageCards) {
    //   cards.value = JSON.parse(localStorageCards);
    // }
  }
};

const selectedCardId = ref(null);

// Reactive state to track the card currently showing the animation
const animationCardId = ref(null);

// Timer reference to control the animation timeout
let animationTimer = null;

// Function to check if a card is selected
const isSelected = (card) => selectedCardId.value === card.id;

// Function to select a card (single click)
// const selectCard = (card) => {
//   // If the same card is clicked again, restart the animation
//   if (selectedCardId.value === card.id) {
//     resetAnimation(card.id);
//     return;
//   }

//   // Set the selected card ID
//   selectedCardId.value = card.id;
//   console.log("Selected Card ID:", selectedCardId.value);
//   // Start the SVG animation
//   startAnimation(card.id);
//   // Reset the automatic selection timer
//   resetAutoSelection();

//   // Prepare data in YAML format

//   // const data = {
//   //   id: card.id,
//   //   name: card.name,
//   //   components: card.components,
//   // };

//   // const yamlData = yaml.dump(data);
//   // // Send POST request with YAML data
//   // axios
//   //   .post(API_URL, yamlData, {
//   //     headers: {
//   //       "Content-Type": "application/x-yaml",
//   //     },
//   //   })
//   //   .then((response) => {
//   //     console.log("Data sent successfully:", response.data);
//   //   })
//   //   .catch((error) => {
//   //     console.error("Error sending data:", error);
//   //   });
// };

import yaml from "js-yaml";
import axios from "axios";

const selectCard = async (card) => {
  // If the same card is clicked again, restart the animation
  if (selectedCardId.value === card.id) {
    resetAnimation(card.id);
    return;
  }

  // Set the selected card ID
  selectedCardId.value = card.id;
  console.log("Selected Card ID:", selectedCardId.value);

  // Start the SVG animation
  startAnimation(card.id);

  // Reset the automatic selection timer
  resetAutoSelection();

  // Prepare data in YAML format
  const scenarioData = {
    apiVersion: "v1",
    kind: "Scenario",
    metadata: {
      name: "bms",
    },
    spec: {
      conditions: {
        express: "eq",
        value: card.name, // Use the card's name as the value
        operands: {
          type: "DDS",
          name: "charging_status",
          value: "rt/piccolo/Charging_Status",
        },
      },
      actions: [{ operation: "update" }],
      targets: [
        {
          name: `bms-algorithm-${card.name.toLowerCase().replace(/\s+/g, "-")}`,
        },
      ],
    },
  };

  const yamlData = yaml.dump(scenarioData);

  try {
    const response = await axios.post(API_URL, yamlData, {
      headers: {
        "Content-Type": "application/x-yaml",
      },
    });
    console.log("Data sent successfully:", response.data);
  } catch (error) {
    console.error("Error sending data:", error);
  }
};

// Function to deselect a card (double click)
const deselectCard = (cardId) => {
  if (selectedCardId.value === cardId) {
    selectedCardId.value = null;
    animationCardId.value = null;
    clearAnimationTimer();
    console.log("Deselected Card ID:", cardId);
  }
};

// Function to start the animation
const startAnimation = (cardId) => {
  // Clear any existing animation timer
  clearAnimationTimer();
  // Set the animationCardId to the selected card
  animationCardId.value = cardId;
  // Start a new timer to hide the animation after 3 seconds
  animationTimer = setTimeout(() => {
    animationCardId.value = null;
    animationTimer = null;
  }, 3000);
};

// Function to reset the animation (optional)
const resetAnimation = (cardId) => {
  // Clear existing timer
  clearAnimationTimer();
  // Restart the animation
  startAnimation(cardId);
};

// Function to clear the animation timer
const clearAnimationTimer = () => {
  if (animationTimer) {
    clearTimeout(animationTimer);
    animationTimer = null;
  }
};

onBeforeUnmount(() => {
  clearAnimationTimer();
  clearAutoSelection(); // Clear the automatic selection timer
});

const selectedCardName = ref(null);

watch(selectedCardId, (newId) => {
  const selectedCard = cards.value.find((card) => card.id === newId);
  selectedCardName.value = selectedCard ? selectedCard.name : null;
});

const deleteCard = (card) => {
  // Remove the card from the cards array
  // cards.value = cards.value.filter((c) => c.id !== card.id);

  // // Update localStorage
  // localStorage.setItem("cards", JSON.stringify(cards.value));
  // // Reset selected card if it was the one deleted
  // if (selectedCardId.value === card.id) {
  //   selectedCardId.value = null;
  //   animationCardId.value = null;
  //   clearAnimationTimer();
  // }
  // console.log("Deleted card:", card.id);

  if (card.isDefault) {
    // Prevent deletion of default cards
    alert("This card cannot be deleted.");
    return;
  }

  // Remove the card from the cards array
  cards.value = cards.value.filter((c) => c.id !== card.id);

  // Update localStorage
  localStorage.setItem("cards", JSON.stringify(cards.value));

  console.log("Deleted card:", card.id);

  // If the deleted card was selected, deselect it
  if (selectedCardId.value === card.id) {
    selectedCardId.value = null;
    animationCardId.value = null;
    clearAnimationTimer();
  }
};

// -------------------- Automatic Selection Logic -------------------- //

// Reference to store the interval timer for automatic selection
let autoSelectTimer = null;

// Current index for automatic selection
let currentAutoIndex = 0;

// Function to start automatic selection
const startAutoSelection = () => {
  if (autoSelectTimer) return; // Prevent multiple intervals

  autoSelectTimer = setInterval(() => {
    if (cards.value.length === 0) return;

    // Select the next card in sequence
    const card = cards.value[currentAutoIndex];
    if (card) {
      selectCard(card);
      console.log(`Automatically selected card ID: ${card.id}`);
    }

    // Update the index for next selection
    currentAutoIndex = (currentAutoIndex + 1) % cards.value.length;
  }, 30000); // 30000 milliseconds = 30 seconds
};

// Function to reset the automatic selection timer
const resetAutoSelection = () => {
  clearAutoSelection();
  startAutoSelection();
};

// Function to clear the automatic selection timer
const clearAutoSelection = () => {
  if (autoSelectTimer) {
    clearInterval(autoSelectTimer);
    autoSelectTimer = null;
  }
};

// Optionally, you can start the automatic selection immediately
// startAutoSelection();
</script>

<style scoped>
.deletearrow {
  animation: delete-arrow 1s ease-in-out infinite;
}
@keyframes delete-arrow {
  0%,
  100% {
    transform: rotate(180deg);
    transform: translate(0, 0);
  }

  50% {
    transform: rotate(180deg);
    transform: translate(10px, 0);
  }
}

.v-icon {
  font-size: 25px;
}

.arrow-animation {
  animation: fadeInOut 4s forwards;
  z-index: 10;
  animation: bounceAnimation 3s infinite;
}

@keyframes bounceAnimation {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-20px);
  }
}

@keyframes fadeInOut {
  0% {
    opacity: 0;
    transform: translate(-50%, -20px);
  }
  20% {
    opacity: 1;
    transform: translate(-50%, 0);
  }
  80% {
    opacity: 1;
    transform: translate(-50%, 0);
  }
  100% {
    opacity: 0;
    transform: translate(-50%, 0);
  }
}

/* Fade transition effect */
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s;
}
.fade-enter,
.fade-leave-to {
  opacity: 0;
}

/* Arrow Animation */
.arrow-right {
  animation: moveRightArrow 0.5s forwards;
}

.arrow-left {
  animation: moveLeftArrow 0.5s forwards;
}

@keyframes moveRightArrow {
  0% {
    opacity: 0;
    transform: translate(-50%, -50%) translateX(-20px);
  }
  50% {
    opacity: 1;
    transform: translate(-50%, -50%) translateX(0);
  }
  100% {
    opacity: 3;
    transform: translate(-50%, -50%) translateX(10px);
  }
}

@keyframes moveLeftArrow {
  0% {
    opacity: 0;
    transform: translate(-50%, -50%) translateX(20px);
  }
  50% {
    opacity: 1;
    transform: translate(-50%, -50%) translateX(0);
  }
  100% {
    opacity: 2;
    transform: translate(-50%, -50%) translateX(-20px);
  }
}

/* Optional: Add transition for border color change */
.selected-card {
  transition: border-color 0.3s ease;
}
</style>
